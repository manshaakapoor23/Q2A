#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <unistd.h>

#define SERVER_PATH "tpf_unix_sock.server"
#define CLIENT_PATH "tpf_unix_sock.client"
#define DATA "HELLO FROM THE CLIENT!!!"

int main(){

    int client, r, length;
    struct sockaddr_un server_addr;
    struct sockaddr_un client_addr;
    char buf[256];
    memset(&server_addr, 0, sizeof(struct sockaddr_un));
    memset(&client_addr, 0, sizeof(struct sockaddr_un));

    client = socket(AF_UNIX, SOCK_STREAM, 0);
    if (client == -1) {
        printf("SOCKET ERROR");
        exit(1);
    }

    client_addr.sun_family = AF_UNIX;
    strcpy(client_addr.sun_path, CLIENT_PATH);
    length = sizeof(client_addr);

    unlink(CLIENT_PATH);
    r = bind(client, (struct sockaddr *) &client_addr, length);
    if (r == -1){
        printf("BIND ERROR!!!");
        close(client);
        exit(1);
    }

    server_addr.sun_family = AF_UNIX;
    strcpy(server_addr.sun_path, SERVER_PATH);
    r = connect(client, (struct sockaddr *) &server_addr, length);
    if(r == -1){
        printf("CONNECTING ERROR!!!");
        close(client);
        exit(1);
    }

    strcpy(buf, DATA);
    printf("SENDING DATA!!!\n");
    r = send(client, buf, strlen(buf), 0);
    if (r == -1) {
        printf("SEND ERROR!!!");
        close(client);
        exit(1);
    }
    else {
        printf("DATA SENT!!!\n");
    }

    printf("WAITING TO RECEIVE DATA...\n");
    memset(buf, 0, sizeof(buf));
    r = recv(client, buf, sizeof(buf), length);
    if (r == -1) {
        printf("RECV ERROR");
        close(client);
        exit(1);
    }
    else {
        printf("DATA RECEIVED = %s\n", buf);
    }

    close(client);

    return 0;
}
